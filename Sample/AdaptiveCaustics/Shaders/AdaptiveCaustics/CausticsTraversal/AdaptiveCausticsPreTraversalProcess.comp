#version 430 core

// An image to store data into.
layout(binding = 0, offset = 0) uniform atomic_uint writeCount;

layout (binding = 1) uniform sampler2DArray refractorNormal;

layout(std430, binding = 0) buffer _ACMSharedCommandBuffer
{
	uint mipmapLevel; // 3
	uint readOffset; // 0
	uint readCount; // 64 * 64 = 4096
	uint writeOffset; // 4096
	uint width;
	uint height;
	float deltaX;
	float deltaY;

} ACMSharedCommandBuffer;

layout(std430, binding = 1) buffer _ACMIndirectCommandBuffer
{
	uint num_groups_x;
	uint num_groups_y;
	uint num_groups_z;

} ACMIndirectCommandBuffer;

layout(std430, binding = 2) buffer _ACMIndirectDrawBuffer
{
	uint  count;
	uint  instanceCount;
	uint  first;
	uint  baseInstance;

} ACMIndirectDrawBuffer;

layout (local_size_x = 1, local_size_y = 1) in;

void main(void)
{
	uint id = gl_GlobalInvocationID.y * gl_WorkGroupSize.y * gl_NumWorkGroups.y + gl_GlobalInvocationID.x;


	if(id == 0)
	{
		ACMSharedCommandBuffer.mipmapLevel = 4; //10 - 6;
		ACMSharedCommandBuffer.readOffset = 0;
		ACMSharedCommandBuffer.readCount = 4096;
		ACMSharedCommandBuffer.writeOffset = 4096;
		ACMSharedCommandBuffer.width = 768;
		ACMSharedCommandBuffer.height = 768;
		ACMSharedCommandBuffer.deltaX = 0.5f / 64;
		ACMSharedCommandBuffer.deltaY = 0.5f / 64;

		ACMIndirectCommandBuffer.num_groups_x = 8;
		ACMIndirectCommandBuffer.num_groups_y = 8;
		ACMIndirectCommandBuffer.num_groups_z = 1;

		ACMIndirectDrawBuffer.count = 0;
		ACMIndirectDrawBuffer.instanceCount = 1;
		ACMIndirectDrawBuffer.first = 0;
		ACMIndirectDrawBuffer.baseInstance = 0;
	}
}