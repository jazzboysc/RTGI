#version 430 core

// An image to store data into.
layout(binding = 0, offset = 0) uniform atomic_uint writeCount;

layout (binding = 1) uniform sampler2DArray refractorNormal;

layout(std430, binding = 0) buffer _ACMSharedCommandBuffer
{
	uint mipmapLevel; // 3
	uint readOffset; // 0
	uint readCount; // 64 * 64 = 4096
	uint writeOffset; // 4096
	uint width;
	uint height;
	float deltaX;
	float deltaY;

} ACMSharedCommandBuffer;

layout(std430, binding = 1) buffer _ACMIndirectCommandBuffer
{
	uint num_groups_x;
	uint num_groups_y;
	uint num_groups_z;

} ACMIndirectCommandBuffer;

layout (local_size_x = 1, local_size_y = 1) in;

void main(void)
{
	uint id = gl_GlobalInvocationID.y * gl_WorkGroupSize.y * gl_NumWorkGroups.y + gl_GlobalInvocationID.x;
	uint res = uint(sqrt(atomicCounter(writeCount)) / 4 + 1.0f);
	ACMIndirectCommandBuffer.num_groups_x = res;
	ACMIndirectCommandBuffer.num_groups_y = res;
	ACMIndirectCommandBuffer.num_groups_z = 1;

	if(id == 0)
	{

		ivec2 texSizeMipmap =  textureSize(refractorNormal, int(ACMSharedCommandBuffer.mipmapLevel)).xy;
		ACMSharedCommandBuffer.deltaX = 0.5f / texSizeMipmap.x;
		ACMSharedCommandBuffer.deltaY = 0.5f / texSizeMipmap.y;

		ACMSharedCommandBuffer.readOffset += ACMSharedCommandBuffer.readCount;
		ACMSharedCommandBuffer.readCount = 4 * atomicCounter(writeCount);
		ACMSharedCommandBuffer.writeOffset += 4 * atomicCounter(writeCount);

		if(ACMSharedCommandBuffer.mipmapLevel > 0)
		{
			ACMSharedCommandBuffer.mipmapLevel --;
		}



	}
}
