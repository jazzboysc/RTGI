#version 430 core

// An image to store data into.
layout(binding = 0, offset = 0) uniform atomic_uint writeCount;
layout(binding = 0, offset = 4) uniform atomic_uint storageCounter2;

layout (rgba16f, binding = 0) uniform image2D data;
layout (binding = 1) uniform sampler2DArray refractorNormal;

layout(std430, binding = 0) buffer _ACMSharedCommandBuffer
{
	uint mipmapLevel; // 3
	uint readOffset; // 0
	uint readCount; // 64 * 64 = 4096
	uint writeOffset; // 4096
	uint width;
	uint height;
	float deltaX;
	float deltaY;
} ACMSharedCommandBuffer;

layout(std430, binding = 1)  buffer _ACMBuffer
{
	vec4 debug;

    // photon uv buffer. Must be big enough.
    vec4 uv[];
} ACMBuffer;



layout (local_size_x = 64, local_size_y = 64, local_size_z = 1) in;


void main(void)
{
	// local constants
	uint readIndex =
	gl_GlobalInvocationID.y * gl_WorkGroupSize.y * gl_NumWorkGroups.y +
	gl_GlobalInvocationID.x;

		// 3D buffer: res * res * 4
		int x = i % resolution;
		int y = i / resolution;
		causticStartPoints[i] = vec4(gl_GlobalInvocationID.y * gl_WorkGroupSize.y * gl_NumWorkGroups.y / (float)resolution, y / (float)resolution, 0, 0);
		//causticStartPoints[i] = fvec4(1, 0, 0, 0);
	}

	vec4 uv = ACMBuffer.uv[ACMSharedCommandBuffer.readOffset + readIndex];

	ivec2 mipmapTexSize =  textureSize(refractorNormal, int(ACMSharedCommandBuffer.mipmapLevel)).xy;
	ivec2 iTCoordMipmap = ivec2(uv.xy * mipmapTexSize);
	vec4 color = texelFetch(refractorNormal, ivec3(iTCoordMipmap, 1), int(ACMSharedCommandBuffer.mipmapLevel));

	if(color.a == 0)
	{
		//uint unusedCount = atomicCounterIncrement(storageCounter2);
		vec2 texSize = vec2(ACMSharedCommandBuffer.width, ACMSharedCommandBuffer.height);
		imageStore(data, ivec2(uv.xy * texSize), vec4(0.3, 0.3, 0.3, 1));
	}
	else
	{
		// Allocate storage
		uint writeIndex = 4 * atomicCounterIncrement(writeCount);
		uint writeOffset = ACMSharedCommandBuffer.writeOffset + writeIndex;

		vec2 texSize = vec2(ACMSharedCommandBuffer.width, ACMSharedCommandBuffer.height);

		vec4 texCoord0 = vec4( uv.x                                , uv.y                                , 0, 0 );
		vec4 texCoord1 = vec4( uv.x + ACMSharedCommandBuffer.deltaX, uv.y                                , 0, 0 );
		vec4 texCoord2 = vec4( uv.x + ACMSharedCommandBuffer.deltaX, uv.y + ACMSharedCommandBuffer.deltaY, 0, 0 );
		vec4 texCoord3 = vec4( uv.x                                , uv.y + ACMSharedCommandBuffer.deltaY, 0, 0 );

		ivec2 imageCoord0 = ivec2(texCoord0.xy * texSize + 0.5f);
		ivec2 imageCoord1 = ivec2(texCoord1.xy * texSize + 0.5f);
		ivec2 imageCoord2 = ivec2(texCoord2.xy * texSize + 0.5f);
		ivec2 imageCoord3 = ivec2(texCoord3.xy * texSize + 0.5f);
	

		ACMBuffer.uv[writeOffset + 0] = texCoord0;
		ACMBuffer.uv[writeOffset + 1] = texCoord1;
		ACMBuffer.uv[writeOffset + 2] = texCoord2;
		ACMBuffer.uv[writeOffset + 3] = texCoord3;
	}
}






// Mipmap visualization
	/*
	vec2 TCoord = vec2(gl_GlobalInvocationID.xy) / vec2(768, 768);
	ivec2 mipmap =  textureSize(refractorNormal, int(ACMUniformBuffer.mipmapLevel)).xy;
	ivec2 iTCoord = ivec2(TCoord * mipmap);
	vec4 debugColor = texelFetch(refractorNormal, ivec3(iTCoord, 1), int(ACMUniformBuffer.mipmapLevel));
	imageStore(data, ivec2(gl_GlobalInvocationID.xy), debugColor);
	*/

		//uint uvLoadIdx = ACMBuffer.startIndex + invocationID;
	//uint uvWriteIdx = ACMBuffer.startIndex + storageIdx;
	//vec4 color = texture(refractorNormal, vec3(invocationCoord, 1), ACMUniformBuffer.mipmapLevel);
	//vec4 color = texture(refractorNormal, vec3(gl_GlobalInvocationID.xy / tCoordMax, 1), ACMUniformBuffer.mipmapLevel);

	//vec2 tCoordMax = vec2(ACMUniformBuffer.width, ACMUniformBuffer.height);
	//vec2 invocationCoord = gl_GlobalInvocationID.xy * tCoordMax / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
