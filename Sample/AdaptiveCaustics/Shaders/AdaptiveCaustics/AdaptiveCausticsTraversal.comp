#version 430 core

// An image to store data into.
layout(binding = 0, offset = 0) uniform atomic_uint writeCount;
layout(binding = 1, offset = 4) uniform atomic_uint storageCounter2;

layout (rgba32f, binding = 0) uniform image2D data;
layout (binding = 1) uniform sampler2DArray refractorNormal;

layout(std140, binding = 0) uniform _ACMUniformBuffer
{
	uint mipmapLevel; // 3
	uint readOffset; // 0
	uint readCount; // 64 * 64 = 4096
	uint writeOffset; // 4096
	uint width;
	uint height;
	float deltaX;
	float deltaY;
} ACMUniformBuffer;

layout(std430, binding = 0)  buffer _ACMBuffer
{
	vec4 debug;

    // photon uv buffer. Must be big enough.
    vec4 uv[];
} ACMBuffer;



layout (local_size_x = 1, local_size_y = 1) in;


void main(void)
{
	// local constants
	uint readIndex = gl_GlobalInvocationID.y * gl_WorkGroupSize.y * gl_NumWorkGroups.y + gl_GlobalInvocationID.x;

	if(readIndex >= ACMUniformBuffer.readCount)
	{
		// unneeded computation
		//return;
	}

	vec4 uv = ACMBuffer.uv[ACMUniformBuffer.readOffset + readIndex];
	vec4 color = texture(refractorNormal, vec3(uv.xy, 1), ACMUniformBuffer.mipmapLevel);
	vec2 texRes = vec2(ACMUniformBuffer.width, ACMUniformBuffer.height);


	if(color.a == 0)
	{
		ivec2 imageCoord = ivec2(uv.xy * texRes);
		imageStore(data, imageCoord, vec4(0.3, 0.3, 0.3, 1));
	}
	else
	{
		// Allocate storage
		uint writeIndex = 4 * atomicCounterIncrement(writeCount);
		uint writeOffset = ACMUniformBuffer.writeOffset + writeIndex;

		vec4 texCoord0 = vec4( uv.x                          , uv.y                          , 0, 0 );
		vec4 texCoord1 = vec4( uv.x - ACMUniformBuffer.deltaX, uv.y                          , 0, 0 );
		vec4 texCoord2 = vec4( uv.x - ACMUniformBuffer.deltaX, uv.y - ACMUniformBuffer.deltaY, 0, 0 );
		vec4 texCoord3 = vec4( uv.x                          , uv.y - ACMUniformBuffer.deltaY, 0, 0 );

		ivec2 imageCoord0 = ivec2(texCoord0.xy * texRes);
		ivec2 imageCoord1 = ivec2(texCoord1.xy * texRes);
		ivec2 imageCoord2 = ivec2(texCoord2.xy * texRes);
		ivec2 imageCoord3 = ivec2(texCoord3.xy * texRes);
	

		ACMBuffer.uv[writeOffset + 0] = texCoord0;
		ACMBuffer.uv[writeOffset + 1] = texCoord1;
		ACMBuffer.uv[writeOffset + 2] = texCoord2;
		ACMBuffer.uv[writeOffset + 3] = texCoord3;


		// Debug display
		vec4 color0 = texture(refractorNormal, vec3(texCoord0.xy, 1));
		vec4 color1 = texture(refractorNormal, vec3(texCoord1.xy, 1));
		vec4 color2 = texture(refractorNormal, vec3(texCoord2.xy, 1));
		vec4 color3 = texture(refractorNormal, vec3(texCoord3.xy, 1));

		if(writeIndex == 24)
		{
			//ACMBuffer.debug = color2;
		}

		imageStore(data, imageCoord0, color0 + vec4(0.5, 0.1, 0.6, 0));
		imageStore(data, imageCoord1, color1 + vec4(0.5, 0.1, 0.6, 0));
		imageStore(data, imageCoord2, color2 + vec4(0.5, 0.1, 0.6, 0));
		imageStore(data, imageCoord3, color3 + vec4(0.5, 0.1, 0.6, 0));
	}
}






// Mipmap visualization
	/*
	vec2 TCoord = vec2(gl_GlobalInvocationID.xy) / vec2(768, 768);
	ivec2 mipmap =  textureSize(refractorNormal, int(ACMUniformBuffer.mipmapLevel)).xy;
	ivec2 iTCoord = ivec2(TCoord * mipmap);
	vec4 debugColor = texelFetch(refractorNormal, ivec3(iTCoord, 1), int(ACMUniformBuffer.mipmapLevel));
	imageStore(data, ivec2(gl_GlobalInvocationID.xy), debugColor);
	*/

		//uint uvLoadIdx = ACMBuffer.startIndex + invocationID;
	//uint uvWriteIdx = ACMBuffer.startIndex + storageIdx;
	//vec4 color = texture(refractorNormal, vec3(invocationCoord, 1), ACMUniformBuffer.mipmapLevel);
	//vec4 color = texture(refractorNormal, vec3(gl_GlobalInvocationID.xy / tCoordMax, 1), ACMUniformBuffer.mipmapLevel);

	//vec2 tCoordMax = vec2(ACMUniformBuffer.width, ACMUniformBuffer.height);
	//vec2 invocationCoord = gl_GlobalInvocationID.xy * tCoordMax / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
